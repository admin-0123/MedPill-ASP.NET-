//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDP_Clinic.EDP_DBReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/DBService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsCaretakerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SaltField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VerifiedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsCaretaker {
            get {
                return this.IsCaretakerField;
            }
            set {
                if ((object.ReferenceEquals(this.IsCaretakerField, value) != true)) {
                    this.IsCaretakerField = value;
                    this.RaisePropertyChanged("IsCaretaker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((object.ReferenceEquals(this.IsDeletedField, value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNo {
            get {
                return this.PhoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNoField, value) != true)) {
                    this.PhoneNoField = value;
                    this.RaisePropertyChanged("PhoneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salt {
            get {
                return this.SaltField;
            }
            set {
                if ((object.ReferenceEquals(this.SaltField, value) != true)) {
                    this.SaltField = value;
                    this.RaisePropertyChanged("Salt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Verified {
            get {
                return this.VerifiedField;
            }
            set {
                if ((object.ReferenceEquals(this.VerifiedField, value) != true)) {
                    this.VerifiedField = value;
                    this.RaisePropertyChanged("Verified");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="displayUser", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class displayUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VerifiedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNo {
            get {
                return this.PhoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNoField, value) != true)) {
                    this.PhoneNoField = value;
                    this.RaisePropertyChanged("PhoneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Verified {
            get {
                return this.VerifiedField;
            }
            set {
                if ((object.ReferenceEquals(this.VerifiedField, value) != true)) {
                    this.VerifiedField = value;
                    this.RaisePropertyChanged("Verified");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="displayPatient", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class displayPatient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsCaretakerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VerifiedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsCaretaker {
            get {
                return this.IsCaretakerField;
            }
            set {
                if ((object.ReferenceEquals(this.IsCaretakerField, value) != true)) {
                    this.IsCaretakerField = value;
                    this.RaisePropertyChanged("IsCaretaker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNo {
            get {
                return this.PhoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNoField, value) != true)) {
                    this.PhoneNoField = value;
                    this.RaisePropertyChanged("PhoneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Verified {
            get {
                return this.VerifiedField;
            }
            set {
                if ((object.ReferenceEquals(this.VerifiedField, value) != true)) {
                    this.VerifiedField = value;
                    this.RaisePropertyChanged("Verified");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardInfo", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class CardInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CVVNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CardExpiryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] IVField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StillValidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqueIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CVVNumber {
            get {
                return this.CVVNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.CVVNumberField, value) != true)) {
                    this.CVVNumberField = value;
                    this.RaisePropertyChanged("CVVNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CardExpiry {
            get {
                return this.CardExpiryField;
            }
            set {
                if ((this.CardExpiryField.Equals(value) != true)) {
                    this.CardExpiryField = value;
                    this.RaisePropertyChanged("CardExpiry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardName {
            get {
                return this.CardNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CardNameField, value) != true)) {
                    this.CardNameField = value;
                    this.RaisePropertyChanged("CardName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardNumber {
            get {
                return this.CardNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.CardNumberField, value) != true)) {
                    this.CardNumberField = value;
                    this.RaisePropertyChanged("CardNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] IV {
            get {
                return this.IVField;
            }
            set {
                if ((object.ReferenceEquals(this.IVField, value) != true)) {
                    this.IVField = value;
                    this.RaisePropertyChanged("IV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StillValid {
            get {
                return this.StillValidField;
            }
            set {
                if ((this.StillValidField.Equals(value) != true)) {
                    this.StillValidField = value;
                    this.RaisePropertyChanged("StillValid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueIdentifier {
            get {
                return this.UniqueIdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueIdentifierField, value) != true)) {
                    this.UniqueIdentifierField = value;
                    this.RaisePropertyChanged("UniqueIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Receipt", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Receipt : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateSaleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPaidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiptLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalSumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqueIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateSale {
            get {
                return this.DateSaleField;
            }
            set {
                if ((this.DateSaleField.Equals(value) != true)) {
                    this.DateSaleField = value;
                    this.RaisePropertyChanged("DateSale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPaid {
            get {
                return this.IsPaidField;
            }
            set {
                if ((this.IsPaidField.Equals(value) != true)) {
                    this.IsPaidField = value;
                    this.RaisePropertyChanged("IsPaid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiptLink {
            get {
                return this.ReceiptLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiptLinkField, value) != true)) {
                    this.ReceiptLinkField = value;
                    this.RaisePropertyChanged("ReceiptLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalSum {
            get {
                return this.TotalSumField;
            }
            set {
                if ((this.TotalSumField.Equals(value) != true)) {
                    this.TotalSumField = value;
                    this.RaisePropertyChanged("TotalSum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueIdentifier {
            get {
                return this.UniqueIdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueIdentifierField, value) != true)) {
                    this.UniqueIdentifierField = value;
                    this.RaisePropertyChanged("UniqueIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Appointment", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Appointment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string appointmentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int caregiverIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime dateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int doctorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string followUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nurseIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int patientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string prescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string remarksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string statusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string appointmentType {
            get {
                return this.appointmentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.appointmentTypeField, value) != true)) {
                    this.appointmentTypeField = value;
                    this.RaisePropertyChanged("appointmentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int caregiverID {
            get {
                return this.caregiverIDField;
            }
            set {
                if ((this.caregiverIDField.Equals(value) != true)) {
                    this.caregiverIDField = value;
                    this.RaisePropertyChanged("caregiverID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dateTime {
            get {
                return this.dateTimeField;
            }
            set {
                if ((this.dateTimeField.Equals(value) != true)) {
                    this.dateTimeField = value;
                    this.RaisePropertyChanged("dateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int doctorID {
            get {
                return this.doctorIDField;
            }
            set {
                if ((this.doctorIDField.Equals(value) != true)) {
                    this.doctorIDField = value;
                    this.RaisePropertyChanged("doctorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string followUp {
            get {
                return this.followUpField;
            }
            set {
                if ((object.ReferenceEquals(this.followUpField, value) != true)) {
                    this.followUpField = value;
                    this.RaisePropertyChanged("followUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nurseID {
            get {
                return this.nurseIDField;
            }
            set {
                if ((this.nurseIDField.Equals(value) != true)) {
                    this.nurseIDField = value;
                    this.RaisePropertyChanged("nurseID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int patientID {
            get {
                return this.patientIDField;
            }
            set {
                if ((this.patientIDField.Equals(value) != true)) {
                    this.patientIDField = value;
                    this.RaisePropertyChanged("patientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string prescription {
            get {
                return this.prescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.prescriptionField, value) != true)) {
                    this.prescriptionField = value;
                    this.RaisePropertyChanged("prescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string remarks {
            get {
                return this.remarksField;
            }
            set {
                if ((object.ReferenceEquals(this.remarksField, value) != true)) {
                    this.remarksField = value;
                    this.RaisePropertyChanged("remarks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string status {
            get {
                return this.statusField;
            }
            set {
                if ((object.ReferenceEquals(this.statusField, value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Photo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Photo_ResourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Photo_Resource {
            get {
                return this.Photo_ResourceField;
            }
            set {
                if ((object.ReferenceEquals(this.Photo_ResourceField, value) != true)) {
                    this.Photo_ResourceField = value;
                    this.RaisePropertyChanged("Photo_Resource");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Caregiver", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Caregiver : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Carereceiver_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Certified_cgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Carereceiver_id {
            get {
                return this.Carereceiver_idField;
            }
            set {
                if ((object.ReferenceEquals(this.Carereceiver_idField, value) != true)) {
                    this.Carereceiver_idField = value;
                    this.RaisePropertyChanged("Carereceiver_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Certified_cg {
            get {
                return this.Certified_cgField;
            }
            set {
                if ((this.Certified_cgField.Equals(value) != true)) {
                    this.Certified_cgField = value;
                    this.RaisePropertyChanged("Certified_cg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Report", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Report : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClinicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Date_of_reportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Clinic {
            get {
                return this.ClinicField;
            }
            set {
                if ((object.ReferenceEquals(this.ClinicField, value) != true)) {
                    this.ClinicField = value;
                    this.RaisePropertyChanged("Clinic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date_of_report {
            get {
                return this.Date_of_reportField;
            }
            set {
                if ((object.ReferenceEquals(this.Date_of_reportField, value) != true)) {
                    this.Date_of_reportField = value;
                    this.RaisePropertyChanged("Date_of_report");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dname {
            get {
                return this.DnameField;
            }
            set {
                if ((object.ReferenceEquals(this.DnameField, value) != true)) {
                    this.DnameField = value;
                    this.RaisePropertyChanged("Dname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pname {
            get {
                return this.PnameField;
            }
            set {
                if ((object.ReferenceEquals(this.PnameField, value) != true)) {
                    this.PnameField = value;
                    this.RaisePropertyChanged("Pname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Details", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Details : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Date_of_birthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NricField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date_of_birth {
            get {
                return this.Date_of_birthField;
            }
            set {
                if ((object.ReferenceEquals(this.Date_of_birthField, value) != true)) {
                    this.Date_of_birthField = value;
                    this.RaisePropertyChanged("Date_of_birth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nric {
            get {
                return this.NricField;
            }
            set {
                if ((object.ReferenceEquals(this.NricField, value) != true)) {
                    this.NricField = value;
                    this.RaisePropertyChanged("Nric");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Postal {
            get {
                return this.PostalField;
            }
            set {
                if ((object.ReferenceEquals(this.PostalField, value) != true)) {
                    this.PostalField = value;
                    this.RaisePropertyChanged("Postal");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Medical_Condition", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Medical_Condition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClinicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Condition_DescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Date_DiagnosisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DoctorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Med_ConditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Patient_CoditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TreatmentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Clinic {
            get {
                return this.ClinicField;
            }
            set {
                if ((object.ReferenceEquals(this.ClinicField, value) != true)) {
                    this.ClinicField = value;
                    this.RaisePropertyChanged("Clinic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Condition_Desc {
            get {
                return this.Condition_DescField;
            }
            set {
                if ((object.ReferenceEquals(this.Condition_DescField, value) != true)) {
                    this.Condition_DescField = value;
                    this.RaisePropertyChanged("Condition_Desc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date_Diagnosis {
            get {
                return this.Date_DiagnosisField;
            }
            set {
                if ((object.ReferenceEquals(this.Date_DiagnosisField, value) != true)) {
                    this.Date_DiagnosisField = value;
                    this.RaisePropertyChanged("Date_Diagnosis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Doctor {
            get {
                return this.DoctorField;
            }
            set {
                if ((object.ReferenceEquals(this.DoctorField, value) != true)) {
                    this.DoctorField = value;
                    this.RaisePropertyChanged("Doctor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Med_Condition {
            get {
                return this.Med_ConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.Med_ConditionField, value) != true)) {
                    this.Med_ConditionField = value;
                    this.RaisePropertyChanged("Med_Condition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Patient_Codition {
            get {
                return this.Patient_CoditionField;
            }
            set {
                if ((object.ReferenceEquals(this.Patient_CoditionField, value) != true)) {
                    this.Patient_CoditionField = value;
                    this.RaisePropertyChanged("Patient_Codition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Treatment {
            get {
                return this.TreatmentField;
            }
            set {
                if ((object.ReferenceEquals(this.TreatmentField, value) != true)) {
                    this.TreatmentField = value;
                    this.RaisePropertyChanged("Treatment");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient_MC", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Patient_MC : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClinicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NricField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Reg_noField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Type_of_leaveField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Clinic {
            get {
                return this.ClinicField;
            }
            set {
                if ((object.ReferenceEquals(this.ClinicField, value) != true)) {
                    this.ClinicField = value;
                    this.RaisePropertyChanged("Clinic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((object.ReferenceEquals(this.DurationField, value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nric {
            get {
                return this.NricField;
            }
            set {
                if ((object.ReferenceEquals(this.NricField, value) != true)) {
                    this.NricField = value;
                    this.RaisePropertyChanged("Nric");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reg_no {
            get {
                return this.Reg_noField;
            }
            set {
                if ((object.ReferenceEquals(this.Reg_noField, value) != true)) {
                    this.Reg_noField = value;
                    this.RaisePropertyChanged("Reg_no");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Signature {
            get {
                return this.SignatureField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureField, value) != true)) {
                    this.SignatureField = value;
                    this.RaisePropertyChanged("Signature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type_of_leave {
            get {
                return this.Type_of_leaveField;
            }
            set {
                if ((object.ReferenceEquals(this.Type_of_leaveField, value) != true)) {
                    this.Type_of_leaveField = value;
                    this.RaisePropertyChanged("Type_of_leave");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Payment_Report", Namespace="http://schemas.datacontract.org/2004/07/DBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Payment_Report : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Date_of_appointmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FeesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Purpose_visitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date_of_appointment {
            get {
                return this.Date_of_appointmentField;
            }
            set {
                if ((object.ReferenceEquals(this.Date_of_appointmentField, value) != true)) {
                    this.Date_of_appointmentField = value;
                    this.RaisePropertyChanged("Date_of_appointment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fees {
            get {
                return this.FeesField;
            }
            set {
                if ((object.ReferenceEquals(this.FeesField, value) != true)) {
                    this.FeesField = value;
                    this.RaisePropertyChanged("Fees");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purpose_visit {
            get {
                return this.Purpose_visitField;
            }
            set {
                if ((object.ReferenceEquals(this.Purpose_visitField, value) != true)) {
                    this.Purpose_visitField = value;
                    this.RaisePropertyChanged("Purpose_visit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EDP_DBReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        EDP_Clinic.EDP_DBReference.CompositeType GetDataUsingDataContract(EDP_Clinic.EDP_DBReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.CompositeType> GetDataUsingDataContractAsync(EDP_Clinic.EDP_DBReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneUser", ReplyAction="http://tempuri.org/IService1/GetOneUserResponse")]
        EDP_Clinic.EDP_DBReference.User GetOneUser(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneUser", ReplyAction="http://tempuri.org/IService1/GetOneUserResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User> GetOneUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddOneUser", ReplyAction="http://tempuri.org/IService1/AddOneUserResponse")]
        int AddOneUser(string name, string password, string salt, string email, string phoneNo, string role, string verified);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddOneUser", ReplyAction="http://tempuri.org/IService1/AddOneUserResponse")]
        System.Threading.Tasks.Task<int> AddOneUserAsync(string name, string password, string salt, string email, string phoneNo, string role, string verified);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditOneUser", ReplyAction="http://tempuri.org/IService1/EditOneUserResponse")]
        int EditOneUser(string id, string name, string email, string mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditOneUser", ReplyAction="http://tempuri.org/IService1/EditOneUserResponse")]
        System.Threading.Tasks.Task<int> EditOneUserAsync(string id, string name, string email, string mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOneUser", ReplyAction="http://tempuri.org/IService1/UpdateOneUserResponse")]
        int UpdateOneUser(string id, string name, string email, string mobile, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOneUser", ReplyAction="http://tempuri.org/IService1/UpdateOneUserResponse")]
        System.Threading.Tasks.Task<int> UpdateOneUserAsync(string id, string name, string email, string mobile, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteOneUser", ReplyAction="http://tempuri.org/IService1/DeleteOneUserResponse")]
        int DeleteOneUser(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteOneUser", ReplyAction="http://tempuri.org/IService1/DeleteOneUserResponse")]
        System.Threading.Tasks.Task<int> DeleteOneUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCaretaker", ReplyAction="http://tempuri.org/IService1/AddCaretakerResponse")]
        int AddCaretaker(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCaretaker", ReplyAction="http://tempuri.org/IService1/AddCaretakerResponse")]
        System.Threading.Tasks.Task<int> AddCaretakerAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveCaretaker", ReplyAction="http://tempuri.org/IService1/RemoveCaretakerResponse")]
        int RemoveCaretaker(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveCaretaker", ReplyAction="http://tempuri.org/IService1/RemoveCaretakerResponse")]
        System.Threading.Tasks.Task<int> RemoveCaretakerAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckOneUser", ReplyAction="http://tempuri.org/IService1/CheckOneUserResponse")]
        int CheckOneUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckOneUser", ReplyAction="http://tempuri.org/IService1/CheckOneUserResponse")]
        System.Threading.Tasks.Task<int> CheckOneUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckPhoneNo", ReplyAction="http://tempuri.org/IService1/CheckPhoneNoResponse")]
        int CheckPhoneNo(string phoneno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckPhoneNo", ReplyAction="http://tempuri.org/IService1/CheckPhoneNoResponse")]
        System.Threading.Tasks.Task<int> CheckPhoneNoAsync(string phoneno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyOneUser", ReplyAction="http://tempuri.org/IService1/VerifyOneUserResponse")]
        int VerifyOneUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyOneUser", ReplyAction="http://tempuri.org/IService1/VerifyOneUserResponse")]
        System.Threading.Tasks.Task<int> VerifyOneUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangePassword", ReplyAction="http://tempuri.org/IService1/ChangePasswordResponse")]
        int ChangePassword(string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangePassword", ReplyAction="http://tempuri.org/IService1/ChangePasswordResponse")]
        System.Threading.Tasks.Task<int> ChangePasswordAsync(string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneUserByEmail", ReplyAction="http://tempuri.org/IService1/GetOneUserByEmailResponse")]
        EDP_Clinic.EDP_DBReference.User GetOneUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneUserByEmail", ReplyAction="http://tempuri.org/IService1/GetOneUserByEmailResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User> GetOneUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneUserByPhoneNo", ReplyAction="http://tempuri.org/IService1/GetOneUserByPhoneNoResponse")]
        EDP_Clinic.EDP_DBReference.User GetOneUserByPhoneNo(string phonoNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneUserByPhoneNo", ReplyAction="http://tempuri.org/IService1/GetOneUserByPhoneNoResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User> GetOneUserByPhoneNoAsync(string phonoNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        EDP_Clinic.EDP_DBReference.User[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPatients", ReplyAction="http://tempuri.org/IService1/GetAllPatientsResponse")]
        EDP_Clinic.EDP_DBReference.User[] GetAllPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPatients", ReplyAction="http://tempuri.org/IService1/GetAllPatientsResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User[]> GetAllPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployees", ReplyAction="http://tempuri.org/IService1/GetAllEmployeesResponse")]
        EDP_Clinic.EDP_DBReference.User[] GetAllEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployees", ReplyAction="http://tempuri.org/IService1/GetAllEmployeesResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User[]> GetAllEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowOneUser", ReplyAction="http://tempuri.org/IService1/ShowOneUserResponse")]
        EDP_Clinic.EDP_DBReference.displayUser ShowOneUser(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowOneUser", ReplyAction="http://tempuri.org/IService1/ShowOneUserResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser> ShowOneUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowAllUsers", ReplyAction="http://tempuri.org/IService1/ShowAllUsersResponse")]
        EDP_Clinic.EDP_DBReference.displayUser[] ShowAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowAllUsers", ReplyAction="http://tempuri.org/IService1/ShowAllUsersResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser[]> ShowAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowAllPatients", ReplyAction="http://tempuri.org/IService1/ShowAllPatientsResponse")]
        EDP_Clinic.EDP_DBReference.displayUser[] ShowAllPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowAllPatients", ReplyAction="http://tempuri.org/IService1/ShowAllPatientsResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser[]> ShowAllPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowAllEmployees", ReplyAction="http://tempuri.org/IService1/ShowAllEmployeesResponse")]
        EDP_Clinic.EDP_DBReference.displayUser[] ShowAllEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowAllEmployees", ReplyAction="http://tempuri.org/IService1/ShowAllEmployeesResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser[]> ShowAllEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowSearchedEmployees", ReplyAction="http://tempuri.org/IService1/ShowSearchedEmployeesResponse")]
        EDP_Clinic.EDP_DBReference.displayUser[] ShowSearchedEmployees(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowSearchedEmployees", ReplyAction="http://tempuri.org/IService1/ShowSearchedEmployeesResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser[]> ShowSearchedEmployeesAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowSearchedPatients", ReplyAction="http://tempuri.org/IService1/ShowSearchedPatientsResponse")]
        EDP_Clinic.EDP_DBReference.displayUser[] ShowSearchedPatients(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowSearchedPatients", ReplyAction="http://tempuri.org/IService1/ShowSearchedPatientsResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser[]> ShowSearchedPatientsAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisplayOnePatient", ReplyAction="http://tempuri.org/IService1/DisplayOnePatientResponse")]
        EDP_Clinic.EDP_DBReference.displayPatient DisplayOnePatient(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisplayOnePatient", ReplyAction="http://tempuri.org/IService1/DisplayOnePatientResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayPatient> DisplayOnePatientAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisplayAllPatients", ReplyAction="http://tempuri.org/IService1/DisplayAllPatientsResponse")]
        EDP_Clinic.EDP_DBReference.displayPatient[] DisplayAllPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisplayAllPatients", ReplyAction="http://tempuri.org/IService1/DisplayAllPatientsResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayPatient[]> DisplayAllPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisplayCaretakers", ReplyAction="http://tempuri.org/IService1/DisplayCaretakersResponse")]
        EDP_Clinic.EDP_DBReference.displayPatient[] DisplayCaretakers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisplayCaretakers", ReplyAction="http://tempuri.org/IService1/DisplayCaretakersResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayPatient[]> DisplayCaretakersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisplayPatientsOnly", ReplyAction="http://tempuri.org/IService1/DisplayPatientsOnlyResponse")]
        EDP_Clinic.EDP_DBReference.displayPatient[] DisplayPatientsOnly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisplayPatientsOnly", ReplyAction="http://tempuri.org/IService1/DisplayPatientsOnlyResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayPatient[]> DisplayPatientsOnlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisplayAllSearchedPatients", ReplyAction="http://tempuri.org/IService1/DisplayAllSearchedPatientsResponse")]
        EDP_Clinic.EDP_DBReference.displayPatient[] DisplayAllSearchedPatients(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisplayAllSearchedPatients", ReplyAction="http://tempuri.org/IService1/DisplayAllSearchedPatientsResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayPatient[]> DisplayAllSearchedPatientsAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmailbyCode", ReplyAction="http://tempuri.org/IService1/GetEmailbyCodeResponse")]
        string GetEmailbyCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmailbyCode", ReplyAction="http://tempuri.org/IService1/GetEmailbyCodeResponse")]
        System.Threading.Tasks.Task<string> GetEmailbyCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckCodeExist", ReplyAction="http://tempuri.org/IService1/CheckCodeExistResponse")]
        int CheckCodeExist(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckCodeExist", ReplyAction="http://tempuri.org/IService1/CheckCodeExistResponse")]
        System.Threading.Tasks.Task<int> CheckCodeExistAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckCodeByEmail", ReplyAction="http://tempuri.org/IService1/CheckCodeByEmailResponse")]
        string CheckCodeByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckCodeByEmail", ReplyAction="http://tempuri.org/IService1/CheckCodeByEmailResponse")]
        System.Threading.Tasks.Task<string> CheckCodeByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCode", ReplyAction="http://tempuri.org/IService1/AddCodeResponse")]
        int AddCode(string email, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCode", ReplyAction="http://tempuri.org/IService1/AddCodeResponse")]
        System.Threading.Tasks.Task<int> AddCodeAsync(string email, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateCardInfo", ReplyAction="http://tempuri.org/IService1/CreateCardInfoResponse")]
        int CreateCardInfo(string userID, string cardName, string cardNumber, System.DateTime cardExpiry, string cvvNumber, byte[] iv, byte[] key, bool stillValid, string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateCardInfo", ReplyAction="http://tempuri.org/IService1/CreateCardInfoResponse")]
        System.Threading.Tasks.Task<int> CreateCardInfoAsync(string userID, string cardName, string cardNumber, System.DateTime cardExpiry, string cvvNumber, byte[] iv, byte[] key, bool stillValid, string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCardByCardNumber", ReplyAction="http://tempuri.org/IService1/GetCardByCardNumberResponse")]
        EDP_Clinic.EDP_DBReference.CardInfo GetCardByCardNumber(string userID, string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCardByCardNumber", ReplyAction="http://tempuri.org/IService1/GetCardByCardNumberResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.CardInfo> GetCardByCardNumberAsync(string userID, string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCards", ReplyAction="http://tempuri.org/IService1/GetAllCardsResponse")]
        EDP_Clinic.EDP_DBReference.CardInfo[] GetAllCards(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCards", ReplyAction="http://tempuri.org/IService1/GetAllCardsResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.CardInfo[]> GetAllCardsAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteByCardNumber", ReplyAction="http://tempuri.org/IService1/DeleteByCardNumberResponse")]
        int DeleteByCardNumber(string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteByCardNumber", ReplyAction="http://tempuri.org/IService1/DeleteByCardNumberResponse")]
        System.Threading.Tasks.Task<int> DeleteByCardNumberAsync(string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckCardByCardNumber", ReplyAction="http://tempuri.org/IService1/CheckCardByCardNumberResponse")]
        bool CheckCardByCardNumber(string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckCardByCardNumber", ReplyAction="http://tempuri.org/IService1/CheckCardByCardNumberResponse")]
        System.Threading.Tasks.Task<bool> CheckCardByCardNumberAsync(string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateReceipt", ReplyAction="http://tempuri.org/IService1/CreateReceiptResponse")]
        int CreateReceipt(string userID, System.DateTime dateSale, double totalSum, bool isPaid, string receiptLink, string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateReceipt", ReplyAction="http://tempuri.org/IService1/CreateReceiptResponse")]
        System.Threading.Tasks.Task<int> CreateReceiptAsync(string userID, System.DateTime dateSale, double totalSum, bool isPaid, string receiptLink, string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllReceipts", ReplyAction="http://tempuri.org/IService1/SelectAllReceiptsResponse")]
        EDP_Clinic.EDP_DBReference.Receipt[] SelectAllReceipts(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllReceipts", ReplyAction="http://tempuri.org/IService1/SelectAllReceiptsResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Receipt[]> SelectAllReceiptsAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByReceiptID", ReplyAction="http://tempuri.org/IService1/SelectByReceiptIDResponse")]
        EDP_Clinic.EDP_DBReference.Receipt SelectByReceiptID(string userID, string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByReceiptID", ReplyAction="http://tempuri.org/IService1/SelectByReceiptIDResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Receipt> SelectByReceiptIDAsync(string userID, string uniqueIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApptAdmin", ReplyAction="http://tempuri.org/IService1/GetAllApptAdminResponse")]
        EDP_Clinic.EDP_DBReference.Appointment[] GetAllApptAdmin();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApptAdmin", ReplyAction="http://tempuri.org/IService1/GetAllApptAdminResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment[]> GetAllApptAdminAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApptUser", ReplyAction="http://tempuri.org/IService1/GetAllApptUserResponse")]
        EDP_Clinic.EDP_DBReference.Appointment[] GetAllApptUser(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApptUser", ReplyAction="http://tempuri.org/IService1/GetAllApptUserResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment[]> GetAllApptUserAsync(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApptUserUpcoming", ReplyAction="http://tempuri.org/IService1/GetAllApptUserUpcomingResponse")]
        EDP_Clinic.EDP_DBReference.Appointment[] GetAllApptUserUpcoming(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApptUserUpcoming", ReplyAction="http://tempuri.org/IService1/GetAllApptUserUpcomingResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment[]> GetAllApptUserUpcomingAsync(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApptUserPast", ReplyAction="http://tempuri.org/IService1/GetAllApptUserPastResponse")]
        EDP_Clinic.EDP_DBReference.Appointment[] GetAllApptUserPast(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApptUserPast", ReplyAction="http://tempuri.org/IService1/GetAllApptUserPastResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment[]> GetAllApptUserPastAsync(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApptUserMissed", ReplyAction="http://tempuri.org/IService1/GetAllApptUserMissedResponse")]
        EDP_Clinic.EDP_DBReference.Appointment[] GetAllApptUserMissed(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApptUserMissed", ReplyAction="http://tempuri.org/IService1/GetAllApptUserMissedResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment[]> GetAllApptUserMissedAsync(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAppointment", ReplyAction="http://tempuri.org/IService1/CreateAppointmentResponse")]
        int CreateAppointment(int patientID, string appointmentType, System.DateTime dateTime, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAppointment", ReplyAction="http://tempuri.org/IService1/CreateAppointmentResponse")]
        System.Threading.Tasks.Task<int> CreateAppointmentAsync(int patientID, string appointmentType, System.DateTime dateTime, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneAppt", ReplyAction="http://tempuri.org/IService1/GetOneApptResponse")]
        EDP_Clinic.EDP_DBReference.Appointment GetOneAppt(int patientID, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneAppt", ReplyAction="http://tempuri.org/IService1/GetOneApptResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment> GetOneApptAsync(int patientID, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOneAppt", ReplyAction="http://tempuri.org/IService1/UpdateOneApptResponse")]
        int UpdateOneAppt(int patientID, string appointmentType, System.DateTime oldTime, System.DateTime newTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOneAppt", ReplyAction="http://tempuri.org/IService1/UpdateOneApptResponse")]
        System.Threading.Tasks.Task<int> UpdateOneApptAsync(int patientID, string appointmentType, System.DateTime oldTime, System.DateTime newTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteOneAppt", ReplyAction="http://tempuri.org/IService1/DeleteOneApptResponse")]
        int DeleteOneAppt(int uid, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteOneAppt", ReplyAction="http://tempuri.org/IService1/DeleteOneApptResponse")]
        System.Threading.Tasks.Task<int> DeleteOneApptAsync(int uid, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOnePhoto", ReplyAction="http://tempuri.org/IService1/GetOnePhotoResponse")]
        EDP_Clinic.EDP_DBReference.Photo GetOnePhoto(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOnePhoto", ReplyAction="http://tempuri.org/IService1/GetOnePhotoResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Photo> GetOnePhotoAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckPhotoExist", ReplyAction="http://tempuri.org/IService1/CheckPhotoExistResponse")]
        int CheckPhotoExist(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckPhotoExist", ReplyAction="http://tempuri.org/IService1/CheckPhotoExistResponse")]
        System.Threading.Tasks.Task<int> CheckPhotoExistAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddOnePhoto", ReplyAction="http://tempuri.org/IService1/AddOnePhotoResponse")]
        int AddOnePhoto(string id, string img);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddOnePhoto", ReplyAction="http://tempuri.org/IService1/AddOnePhotoResponse")]
        System.Threading.Tasks.Task<int> AddOnePhotoAsync(string id, string img);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOnePhoto", ReplyAction="http://tempuri.org/IService1/UpdateOnePhotoResponse")]
        int UpdateOnePhoto(string id, string img);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOnePhoto", ReplyAction="http://tempuri.org/IService1/UpdateOnePhotoResponse")]
        System.Threading.Tasks.Task<int> UpdateOnePhotoAsync(string id, string img);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneCG", ReplyAction="http://tempuri.org/IService1/GetOneCGResponse")]
        EDP_Clinic.EDP_DBReference.Caregiver GetOneCG(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneCG", ReplyAction="http://tempuri.org/IService1/GetOneCGResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Caregiver> GetOneCGAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateReport", ReplyAction="http://tempuri.org/IService1/CreateReportResponse")]
        int CreateReport(string id, string dname, string pname, string clinic, string date_of_report, string details);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateReport", ReplyAction="http://tempuri.org/IService1/CreateReportResponse")]
        System.Threading.Tasks.Task<int> CreateReportAsync(string id, string dname, string pname, string clinic, string date_of_report, string details);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportById", ReplyAction="http://tempuri.org/IService1/GetReportByIdResponse")]
        EDP_Clinic.EDP_DBReference.Report GetReportById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportById", ReplyAction="http://tempuri.org/IService1/GetReportByIdResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Report> GetReportByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllReport", ReplyAction="http://tempuri.org/IService1/GetAllReportResponse")]
        EDP_Clinic.EDP_DBReference.Report[] GetAllReport();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllReport", ReplyAction="http://tempuri.org/IService1/GetAllReportResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Report[]> GetAllReportAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateReportById", ReplyAction="http://tempuri.org/IService1/UpdateReportByIdResponse")]
        int UpdateReportById(string id, string dname, string pname, string clinic, string date_of_report, string details);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateReportById", ReplyAction="http://tempuri.org/IService1/UpdateReportByIdResponse")]
        System.Threading.Tasks.Task<int> UpdateReportByIdAsync(string id, string dname, string pname, string clinic, string date_of_report, string details);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateDetails", ReplyAction="http://tempuri.org/IService1/CreateDetailsResponse")]
        int CreateDetails(string name, string nric, string date_of_birth, string gender, string phone, string email, string address, string postal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateDetails", ReplyAction="http://tempuri.org/IService1/CreateDetailsResponse")]
        System.Threading.Tasks.Task<int> CreateDetailsAsync(string name, string nric, string date_of_birth, string gender, string phone, string email, string address, string postal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDetailsById", ReplyAction="http://tempuri.org/IService1/GetDetailsByIdResponse")]
        EDP_Clinic.EDP_DBReference.Details GetDetailsById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDetailsById", ReplyAction="http://tempuri.org/IService1/GetDetailsByIdResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Details> GetDetailsByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllDetails", ReplyAction="http://tempuri.org/IService1/GetAllDetailsResponse")]
        EDP_Clinic.EDP_DBReference.Details[] GetAllDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllDetails", ReplyAction="http://tempuri.org/IService1/GetAllDetailsResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Details[]> GetAllDetailsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDetailsById", ReplyAction="http://tempuri.org/IService1/UpdateDetailsByIdResponse")]
        int UpdateDetailsById(string id, string name, string nric, string date_of_birth, string gender, string phone, string email, string address, string postal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDetailsById", ReplyAction="http://tempuri.org/IService1/UpdateDetailsByIdResponse")]
        System.Threading.Tasks.Task<int> UpdateDetailsByIdAsync(string id, string name, string nric, string date_of_birth, string gender, string phone, string email, string address, string postal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateMedicalCondition", ReplyAction="http://tempuri.org/IService1/CreateMedicalConditionResponse")]
        int CreateMedicalCondition(string id, string name, string med_condition, string date_diagnosis, string doctor, string clinic, string treatment, string condition_desc, string patient_codition, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateMedicalCondition", ReplyAction="http://tempuri.org/IService1/CreateMedicalConditionResponse")]
        System.Threading.Tasks.Task<int> CreateMedicalConditionAsync(string id, string name, string med_condition, string date_diagnosis, string doctor, string clinic, string treatment, string condition_desc, string patient_codition, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMedicalConditionById", ReplyAction="http://tempuri.org/IService1/GetMedicalConditionByIdResponse")]
        EDP_Clinic.EDP_DBReference.Medical_Condition GetMedicalConditionById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMedicalConditionById", ReplyAction="http://tempuri.org/IService1/GetMedicalConditionByIdResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Medical_Condition> GetMedicalConditionByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMedicalCondition", ReplyAction="http://tempuri.org/IService1/GetAllMedicalConditionResponse")]
        EDP_Clinic.EDP_DBReference.Medical_Condition[] GetAllMedicalCondition();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMedicalCondition", ReplyAction="http://tempuri.org/IService1/GetAllMedicalConditionResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Medical_Condition[]> GetAllMedicalConditionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateMedicalConditionById", ReplyAction="http://tempuri.org/IService1/UpdateMedicalConditionByIdResponse")]
        int UpdateMedicalConditionById(string id, string Patient_Condition, string Comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateMedicalConditionById", ReplyAction="http://tempuri.org/IService1/UpdateMedicalConditionByIdResponse")]
        System.Threading.Tasks.Task<int> UpdateMedicalConditionByIdAsync(string id, string Patient_Condition, string Comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreatePatient_MC", ReplyAction="http://tempuri.org/IService1/CreatePatient_MCResponse")]
        int CreatePatient_MC(string reg_no, string name, string nric, string duration, string type_of_leave, string clinic, string signature, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreatePatient_MC", ReplyAction="http://tempuri.org/IService1/CreatePatient_MCResponse")]
        System.Threading.Tasks.Task<int> CreatePatient_MCAsync(string reg_no, string name, string nric, string duration, string type_of_leave, string clinic, string signature, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPatient_MCById", ReplyAction="http://tempuri.org/IService1/GetPatient_MCByIdResponse")]
        EDP_Clinic.EDP_DBReference.Patient_MC GetPatient_MCById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPatient_MCById", ReplyAction="http://tempuri.org/IService1/GetPatient_MCByIdResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Patient_MC> GetPatient_MCByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPatient_MC", ReplyAction="http://tempuri.org/IService1/GetAllPatient_MCResponse")]
        EDP_Clinic.EDP_DBReference.Patient_MC[] GetAllPatient_MC();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPatient_MC", ReplyAction="http://tempuri.org/IService1/GetAllPatient_MCResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Patient_MC[]> GetAllPatient_MCAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreatePayment_Report", ReplyAction="http://tempuri.org/IService1/CreatePayment_ReportResponse")]
        int CreatePayment_Report(string date_of_appointment, string purpose_visit, string fees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreatePayment_Report", ReplyAction="http://tempuri.org/IService1/CreatePayment_ReportResponse")]
        System.Threading.Tasks.Task<int> CreatePayment_ReportAsync(string date_of_appointment, string purpose_visit, string fees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayment_ReportById", ReplyAction="http://tempuri.org/IService1/GetPayment_ReportByIdResponse")]
        EDP_Clinic.EDP_DBReference.Payment_Report GetPayment_ReportById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayment_ReportById", ReplyAction="http://tempuri.org/IService1/GetPayment_ReportByIdResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Payment_Report> GetPayment_ReportByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPayment_Report", ReplyAction="http://tempuri.org/IService1/GetAllPayment_ReportResponse")]
        EDP_Clinic.EDP_DBReference.Payment_Report[] GetAllPayment_Report();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPayment_Report", ReplyAction="http://tempuri.org/IService1/GetAllPayment_ReportResponse")]
        System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Payment_Report[]> GetAllPayment_ReportAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : EDP_Clinic.EDP_DBReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<EDP_Clinic.EDP_DBReference.IService1>, EDP_Clinic.EDP_DBReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public EDP_Clinic.EDP_DBReference.CompositeType GetDataUsingDataContract(EDP_Clinic.EDP_DBReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.CompositeType> GetDataUsingDataContractAsync(EDP_Clinic.EDP_DBReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public EDP_Clinic.EDP_DBReference.User GetOneUser(string id) {
            return base.Channel.GetOneUser(id);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User> GetOneUserAsync(string id) {
            return base.Channel.GetOneUserAsync(id);
        }
        
        public int AddOneUser(string name, string password, string salt, string email, string phoneNo, string role, string verified) {
            return base.Channel.AddOneUser(name, password, salt, email, phoneNo, role, verified);
        }
        
        public System.Threading.Tasks.Task<int> AddOneUserAsync(string name, string password, string salt, string email, string phoneNo, string role, string verified) {
            return base.Channel.AddOneUserAsync(name, password, salt, email, phoneNo, role, verified);
        }
        
        public int EditOneUser(string id, string name, string email, string mobile) {
            return base.Channel.EditOneUser(id, name, email, mobile);
        }
        
        public System.Threading.Tasks.Task<int> EditOneUserAsync(string id, string name, string email, string mobile) {
            return base.Channel.EditOneUserAsync(id, name, email, mobile);
        }
        
        public int UpdateOneUser(string id, string name, string email, string mobile, string password) {
            return base.Channel.UpdateOneUser(id, name, email, mobile, password);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOneUserAsync(string id, string name, string email, string mobile, string password) {
            return base.Channel.UpdateOneUserAsync(id, name, email, mobile, password);
        }
        
        public int DeleteOneUser(string id) {
            return base.Channel.DeleteOneUser(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteOneUserAsync(string id) {
            return base.Channel.DeleteOneUserAsync(id);
        }
        
        public int AddCaretaker(string id) {
            return base.Channel.AddCaretaker(id);
        }
        
        public System.Threading.Tasks.Task<int> AddCaretakerAsync(string id) {
            return base.Channel.AddCaretakerAsync(id);
        }
        
        public int RemoveCaretaker(string id) {
            return base.Channel.RemoveCaretaker(id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveCaretakerAsync(string id) {
            return base.Channel.RemoveCaretakerAsync(id);
        }
        
        public int CheckOneUser(string email) {
            return base.Channel.CheckOneUser(email);
        }
        
        public System.Threading.Tasks.Task<int> CheckOneUserAsync(string email) {
            return base.Channel.CheckOneUserAsync(email);
        }
        
        public int CheckPhoneNo(string phoneno) {
            return base.Channel.CheckPhoneNo(phoneno);
        }
        
        public System.Threading.Tasks.Task<int> CheckPhoneNoAsync(string phoneno) {
            return base.Channel.CheckPhoneNoAsync(phoneno);
        }
        
        public int VerifyOneUser(string email) {
            return base.Channel.VerifyOneUser(email);
        }
        
        public System.Threading.Tasks.Task<int> VerifyOneUserAsync(string email) {
            return base.Channel.VerifyOneUserAsync(email);
        }
        
        public int ChangePassword(string password, string email) {
            return base.Channel.ChangePassword(password, email);
        }
        
        public System.Threading.Tasks.Task<int> ChangePasswordAsync(string password, string email) {
            return base.Channel.ChangePasswordAsync(password, email);
        }
        
        public EDP_Clinic.EDP_DBReference.User GetOneUserByEmail(string email) {
            return base.Channel.GetOneUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User> GetOneUserByEmailAsync(string email) {
            return base.Channel.GetOneUserByEmailAsync(email);
        }
        
        public EDP_Clinic.EDP_DBReference.User GetOneUserByPhoneNo(string phonoNo) {
            return base.Channel.GetOneUserByPhoneNo(phonoNo);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User> GetOneUserByPhoneNoAsync(string phonoNo) {
            return base.Channel.GetOneUserByPhoneNoAsync(phonoNo);
        }
        
        public EDP_Clinic.EDP_DBReference.User[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public EDP_Clinic.EDP_DBReference.User[] GetAllPatients() {
            return base.Channel.GetAllPatients();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User[]> GetAllPatientsAsync() {
            return base.Channel.GetAllPatientsAsync();
        }
        
        public EDP_Clinic.EDP_DBReference.User[] GetAllEmployees() {
            return base.Channel.GetAllEmployees();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.User[]> GetAllEmployeesAsync() {
            return base.Channel.GetAllEmployeesAsync();
        }
        
        public EDP_Clinic.EDP_DBReference.displayUser ShowOneUser(string id) {
            return base.Channel.ShowOneUser(id);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser> ShowOneUserAsync(string id) {
            return base.Channel.ShowOneUserAsync(id);
        }
        
        public EDP_Clinic.EDP_DBReference.displayUser[] ShowAllUsers() {
            return base.Channel.ShowAllUsers();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser[]> ShowAllUsersAsync() {
            return base.Channel.ShowAllUsersAsync();
        }
        
        public EDP_Clinic.EDP_DBReference.displayUser[] ShowAllPatients() {
            return base.Channel.ShowAllPatients();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser[]> ShowAllPatientsAsync() {
            return base.Channel.ShowAllPatientsAsync();
        }
        
        public EDP_Clinic.EDP_DBReference.displayUser[] ShowAllEmployees() {
            return base.Channel.ShowAllEmployees();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser[]> ShowAllEmployeesAsync() {
            return base.Channel.ShowAllEmployeesAsync();
        }
        
        public EDP_Clinic.EDP_DBReference.displayUser[] ShowSearchedEmployees(string name) {
            return base.Channel.ShowSearchedEmployees(name);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser[]> ShowSearchedEmployeesAsync(string name) {
            return base.Channel.ShowSearchedEmployeesAsync(name);
        }
        
        public EDP_Clinic.EDP_DBReference.displayUser[] ShowSearchedPatients(string name) {
            return base.Channel.ShowSearchedPatients(name);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayUser[]> ShowSearchedPatientsAsync(string name) {
            return base.Channel.ShowSearchedPatientsAsync(name);
        }
        
        public EDP_Clinic.EDP_DBReference.displayPatient DisplayOnePatient(string email) {
            return base.Channel.DisplayOnePatient(email);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayPatient> DisplayOnePatientAsync(string email) {
            return base.Channel.DisplayOnePatientAsync(email);
        }
        
        public EDP_Clinic.EDP_DBReference.displayPatient[] DisplayAllPatients() {
            return base.Channel.DisplayAllPatients();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayPatient[]> DisplayAllPatientsAsync() {
            return base.Channel.DisplayAllPatientsAsync();
        }
        
        public EDP_Clinic.EDP_DBReference.displayPatient[] DisplayCaretakers() {
            return base.Channel.DisplayCaretakers();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayPatient[]> DisplayCaretakersAsync() {
            return base.Channel.DisplayCaretakersAsync();
        }
        
        public EDP_Clinic.EDP_DBReference.displayPatient[] DisplayPatientsOnly() {
            return base.Channel.DisplayPatientsOnly();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayPatient[]> DisplayPatientsOnlyAsync() {
            return base.Channel.DisplayPatientsOnlyAsync();
        }
        
        public EDP_Clinic.EDP_DBReference.displayPatient[] DisplayAllSearchedPatients(string name) {
            return base.Channel.DisplayAllSearchedPatients(name);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.displayPatient[]> DisplayAllSearchedPatientsAsync(string name) {
            return base.Channel.DisplayAllSearchedPatientsAsync(name);
        }
        
        public string GetEmailbyCode(string code) {
            return base.Channel.GetEmailbyCode(code);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailbyCodeAsync(string code) {
            return base.Channel.GetEmailbyCodeAsync(code);
        }
        
        public int CheckCodeExist(string code) {
            return base.Channel.CheckCodeExist(code);
        }
        
        public System.Threading.Tasks.Task<int> CheckCodeExistAsync(string code) {
            return base.Channel.CheckCodeExistAsync(code);
        }
        
        public string CheckCodeByEmail(string email) {
            return base.Channel.CheckCodeByEmail(email);
        }
        
        public System.Threading.Tasks.Task<string> CheckCodeByEmailAsync(string email) {
            return base.Channel.CheckCodeByEmailAsync(email);
        }
        
        public int AddCode(string email, string code) {
            return base.Channel.AddCode(email, code);
        }
        
        public System.Threading.Tasks.Task<int> AddCodeAsync(string email, string code) {
            return base.Channel.AddCodeAsync(email, code);
        }
        
        public int CreateCardInfo(string userID, string cardName, string cardNumber, System.DateTime cardExpiry, string cvvNumber, byte[] iv, byte[] key, bool stillValid, string uniqueIdentifier) {
            return base.Channel.CreateCardInfo(userID, cardName, cardNumber, cardExpiry, cvvNumber, iv, key, stillValid, uniqueIdentifier);
        }
        
        public System.Threading.Tasks.Task<int> CreateCardInfoAsync(string userID, string cardName, string cardNumber, System.DateTime cardExpiry, string cvvNumber, byte[] iv, byte[] key, bool stillValid, string uniqueIdentifier) {
            return base.Channel.CreateCardInfoAsync(userID, cardName, cardNumber, cardExpiry, cvvNumber, iv, key, stillValid, uniqueIdentifier);
        }
        
        public EDP_Clinic.EDP_DBReference.CardInfo GetCardByCardNumber(string userID, string uniqueIdentifier) {
            return base.Channel.GetCardByCardNumber(userID, uniqueIdentifier);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.CardInfo> GetCardByCardNumberAsync(string userID, string uniqueIdentifier) {
            return base.Channel.GetCardByCardNumberAsync(userID, uniqueIdentifier);
        }
        
        public EDP_Clinic.EDP_DBReference.CardInfo[] GetAllCards(string userID) {
            return base.Channel.GetAllCards(userID);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.CardInfo[]> GetAllCardsAsync(string userID) {
            return base.Channel.GetAllCardsAsync(userID);
        }
        
        public int DeleteByCardNumber(string uniqueIdentifier) {
            return base.Channel.DeleteByCardNumber(uniqueIdentifier);
        }
        
        public System.Threading.Tasks.Task<int> DeleteByCardNumberAsync(string uniqueIdentifier) {
            return base.Channel.DeleteByCardNumberAsync(uniqueIdentifier);
        }
        
        public bool CheckCardByCardNumber(string uniqueIdentifier) {
            return base.Channel.CheckCardByCardNumber(uniqueIdentifier);
        }
        
        public System.Threading.Tasks.Task<bool> CheckCardByCardNumberAsync(string uniqueIdentifier) {
            return base.Channel.CheckCardByCardNumberAsync(uniqueIdentifier);
        }
        
        public int CreateReceipt(string userID, System.DateTime dateSale, double totalSum, bool isPaid, string receiptLink, string uniqueIdentifier) {
            return base.Channel.CreateReceipt(userID, dateSale, totalSum, isPaid, receiptLink, uniqueIdentifier);
        }
        
        public System.Threading.Tasks.Task<int> CreateReceiptAsync(string userID, System.DateTime dateSale, double totalSum, bool isPaid, string receiptLink, string uniqueIdentifier) {
            return base.Channel.CreateReceiptAsync(userID, dateSale, totalSum, isPaid, receiptLink, uniqueIdentifier);
        }
        
        public EDP_Clinic.EDP_DBReference.Receipt[] SelectAllReceipts(string userID) {
            return base.Channel.SelectAllReceipts(userID);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Receipt[]> SelectAllReceiptsAsync(string userID) {
            return base.Channel.SelectAllReceiptsAsync(userID);
        }
        
        public EDP_Clinic.EDP_DBReference.Receipt SelectByReceiptID(string userID, string uniqueIdentifier) {
            return base.Channel.SelectByReceiptID(userID, uniqueIdentifier);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Receipt> SelectByReceiptIDAsync(string userID, string uniqueIdentifier) {
            return base.Channel.SelectByReceiptIDAsync(userID, uniqueIdentifier);
        }
        
        public EDP_Clinic.EDP_DBReference.Appointment[] GetAllApptAdmin() {
            return base.Channel.GetAllApptAdmin();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment[]> GetAllApptAdminAsync() {
            return base.Channel.GetAllApptAdminAsync();
        }
        
        public EDP_Clinic.EDP_DBReference.Appointment[] GetAllApptUser(int uid) {
            return base.Channel.GetAllApptUser(uid);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment[]> GetAllApptUserAsync(int uid) {
            return base.Channel.GetAllApptUserAsync(uid);
        }
        
        public EDP_Clinic.EDP_DBReference.Appointment[] GetAllApptUserUpcoming(int uid) {
            return base.Channel.GetAllApptUserUpcoming(uid);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment[]> GetAllApptUserUpcomingAsync(int uid) {
            return base.Channel.GetAllApptUserUpcomingAsync(uid);
        }
        
        public EDP_Clinic.EDP_DBReference.Appointment[] GetAllApptUserPast(int uid) {
            return base.Channel.GetAllApptUserPast(uid);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment[]> GetAllApptUserPastAsync(int uid) {
            return base.Channel.GetAllApptUserPastAsync(uid);
        }
        
        public EDP_Clinic.EDP_DBReference.Appointment[] GetAllApptUserMissed(int uid) {
            return base.Channel.GetAllApptUserMissed(uid);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment[]> GetAllApptUserMissedAsync(int uid) {
            return base.Channel.GetAllApptUserMissedAsync(uid);
        }
        
        public int CreateAppointment(int patientID, string appointmentType, System.DateTime dateTime, string status) {
            return base.Channel.CreateAppointment(patientID, appointmentType, dateTime, status);
        }
        
        public System.Threading.Tasks.Task<int> CreateAppointmentAsync(int patientID, string appointmentType, System.DateTime dateTime, string status) {
            return base.Channel.CreateAppointmentAsync(patientID, appointmentType, dateTime, status);
        }
        
        public EDP_Clinic.EDP_DBReference.Appointment GetOneAppt(int patientID, System.DateTime dateTime) {
            return base.Channel.GetOneAppt(patientID, dateTime);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Appointment> GetOneApptAsync(int patientID, System.DateTime dateTime) {
            return base.Channel.GetOneApptAsync(patientID, dateTime);
        }
        
        public int UpdateOneAppt(int patientID, string appointmentType, System.DateTime oldTime, System.DateTime newTime) {
            return base.Channel.UpdateOneAppt(patientID, appointmentType, oldTime, newTime);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOneApptAsync(int patientID, string appointmentType, System.DateTime oldTime, System.DateTime newTime) {
            return base.Channel.UpdateOneApptAsync(patientID, appointmentType, oldTime, newTime);
        }
        
        public int DeleteOneAppt(int uid, System.DateTime dateTime) {
            return base.Channel.DeleteOneAppt(uid, dateTime);
        }
        
        public System.Threading.Tasks.Task<int> DeleteOneApptAsync(int uid, System.DateTime dateTime) {
            return base.Channel.DeleteOneApptAsync(uid, dateTime);
        }
        
        public EDP_Clinic.EDP_DBReference.Photo GetOnePhoto(string id) {
            return base.Channel.GetOnePhoto(id);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Photo> GetOnePhotoAsync(string id) {
            return base.Channel.GetOnePhotoAsync(id);
        }
        
        public int CheckPhotoExist(string id) {
            return base.Channel.CheckPhotoExist(id);
        }
        
        public System.Threading.Tasks.Task<int> CheckPhotoExistAsync(string id) {
            return base.Channel.CheckPhotoExistAsync(id);
        }
        
        public int AddOnePhoto(string id, string img) {
            return base.Channel.AddOnePhoto(id, img);
        }
        
        public System.Threading.Tasks.Task<int> AddOnePhotoAsync(string id, string img) {
            return base.Channel.AddOnePhotoAsync(id, img);
        }
        
        public int UpdateOnePhoto(string id, string img) {
            return base.Channel.UpdateOnePhoto(id, img);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOnePhotoAsync(string id, string img) {
            return base.Channel.UpdateOnePhotoAsync(id, img);
        }
        
        public EDP_Clinic.EDP_DBReference.Caregiver GetOneCG(string id) {
            return base.Channel.GetOneCG(id);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Caregiver> GetOneCGAsync(string id) {
            return base.Channel.GetOneCGAsync(id);
        }
        
        public int CreateReport(string id, string dname, string pname, string clinic, string date_of_report, string details) {
            return base.Channel.CreateReport(id, dname, pname, clinic, date_of_report, details);
        }
        
        public System.Threading.Tasks.Task<int> CreateReportAsync(string id, string dname, string pname, string clinic, string date_of_report, string details) {
            return base.Channel.CreateReportAsync(id, dname, pname, clinic, date_of_report, details);
        }
        
        public EDP_Clinic.EDP_DBReference.Report GetReportById(string id) {
            return base.Channel.GetReportById(id);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Report> GetReportByIdAsync(string id) {
            return base.Channel.GetReportByIdAsync(id);
        }
        
        public EDP_Clinic.EDP_DBReference.Report[] GetAllReport() {
            return base.Channel.GetAllReport();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Report[]> GetAllReportAsync() {
            return base.Channel.GetAllReportAsync();
        }
        
        public int UpdateReportById(string id, string dname, string pname, string clinic, string date_of_report, string details) {
            return base.Channel.UpdateReportById(id, dname, pname, clinic, date_of_report, details);
        }
        
        public System.Threading.Tasks.Task<int> UpdateReportByIdAsync(string id, string dname, string pname, string clinic, string date_of_report, string details) {
            return base.Channel.UpdateReportByIdAsync(id, dname, pname, clinic, date_of_report, details);
        }
        
        public int CreateDetails(string name, string nric, string date_of_birth, string gender, string phone, string email, string address, string postal) {
            return base.Channel.CreateDetails(name, nric, date_of_birth, gender, phone, email, address, postal);
        }
        
        public System.Threading.Tasks.Task<int> CreateDetailsAsync(string name, string nric, string date_of_birth, string gender, string phone, string email, string address, string postal) {
            return base.Channel.CreateDetailsAsync(name, nric, date_of_birth, gender, phone, email, address, postal);
        }
        
        public EDP_Clinic.EDP_DBReference.Details GetDetailsById(string id) {
            return base.Channel.GetDetailsById(id);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Details> GetDetailsByIdAsync(string id) {
            return base.Channel.GetDetailsByIdAsync(id);
        }
        
        public EDP_Clinic.EDP_DBReference.Details[] GetAllDetails() {
            return base.Channel.GetAllDetails();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Details[]> GetAllDetailsAsync() {
            return base.Channel.GetAllDetailsAsync();
        }
        
        public int UpdateDetailsById(string id, string name, string nric, string date_of_birth, string gender, string phone, string email, string address, string postal) {
            return base.Channel.UpdateDetailsById(id, name, nric, date_of_birth, gender, phone, email, address, postal);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDetailsByIdAsync(string id, string name, string nric, string date_of_birth, string gender, string phone, string email, string address, string postal) {
            return base.Channel.UpdateDetailsByIdAsync(id, name, nric, date_of_birth, gender, phone, email, address, postal);
        }
        
        public int CreateMedicalCondition(string id, string name, string med_condition, string date_diagnosis, string doctor, string clinic, string treatment, string condition_desc, string patient_codition, string comments) {
            return base.Channel.CreateMedicalCondition(id, name, med_condition, date_diagnosis, doctor, clinic, treatment, condition_desc, patient_codition, comments);
        }
        
        public System.Threading.Tasks.Task<int> CreateMedicalConditionAsync(string id, string name, string med_condition, string date_diagnosis, string doctor, string clinic, string treatment, string condition_desc, string patient_codition, string comments) {
            return base.Channel.CreateMedicalConditionAsync(id, name, med_condition, date_diagnosis, doctor, clinic, treatment, condition_desc, patient_codition, comments);
        }
        
        public EDP_Clinic.EDP_DBReference.Medical_Condition GetMedicalConditionById(string id) {
            return base.Channel.GetMedicalConditionById(id);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Medical_Condition> GetMedicalConditionByIdAsync(string id) {
            return base.Channel.GetMedicalConditionByIdAsync(id);
        }
        
        public EDP_Clinic.EDP_DBReference.Medical_Condition[] GetAllMedicalCondition() {
            return base.Channel.GetAllMedicalCondition();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Medical_Condition[]> GetAllMedicalConditionAsync() {
            return base.Channel.GetAllMedicalConditionAsync();
        }
        
        public int UpdateMedicalConditionById(string id, string Patient_Condition, string Comments) {
            return base.Channel.UpdateMedicalConditionById(id, Patient_Condition, Comments);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMedicalConditionByIdAsync(string id, string Patient_Condition, string Comments) {
            return base.Channel.UpdateMedicalConditionByIdAsync(id, Patient_Condition, Comments);
        }
        
        public int CreatePatient_MC(string reg_no, string name, string nric, string duration, string type_of_leave, string clinic, string signature, string date) {
            return base.Channel.CreatePatient_MC(reg_no, name, nric, duration, type_of_leave, clinic, signature, date);
        }
        
        public System.Threading.Tasks.Task<int> CreatePatient_MCAsync(string reg_no, string name, string nric, string duration, string type_of_leave, string clinic, string signature, string date) {
            return base.Channel.CreatePatient_MCAsync(reg_no, name, nric, duration, type_of_leave, clinic, signature, date);
        }
        
        public EDP_Clinic.EDP_DBReference.Patient_MC GetPatient_MCById(string id) {
            return base.Channel.GetPatient_MCById(id);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Patient_MC> GetPatient_MCByIdAsync(string id) {
            return base.Channel.GetPatient_MCByIdAsync(id);
        }
        
        public EDP_Clinic.EDP_DBReference.Patient_MC[] GetAllPatient_MC() {
            return base.Channel.GetAllPatient_MC();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Patient_MC[]> GetAllPatient_MCAsync() {
            return base.Channel.GetAllPatient_MCAsync();
        }
        
        public int CreatePayment_Report(string date_of_appointment, string purpose_visit, string fees) {
            return base.Channel.CreatePayment_Report(date_of_appointment, purpose_visit, fees);
        }
        
        public System.Threading.Tasks.Task<int> CreatePayment_ReportAsync(string date_of_appointment, string purpose_visit, string fees) {
            return base.Channel.CreatePayment_ReportAsync(date_of_appointment, purpose_visit, fees);
        }
        
        public EDP_Clinic.EDP_DBReference.Payment_Report GetPayment_ReportById(string id) {
            return base.Channel.GetPayment_ReportById(id);
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Payment_Report> GetPayment_ReportByIdAsync(string id) {
            return base.Channel.GetPayment_ReportByIdAsync(id);
        }
        
        public EDP_Clinic.EDP_DBReference.Payment_Report[] GetAllPayment_Report() {
            return base.Channel.GetAllPayment_Report();
        }
        
        public System.Threading.Tasks.Task<EDP_Clinic.EDP_DBReference.Payment_Report[]> GetAllPayment_ReportAsync() {
            return base.Channel.GetAllPayment_ReportAsync();
        }
    }
}
